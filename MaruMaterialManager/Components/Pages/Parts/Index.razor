@page "/parts"
@rendermode InteractiveServer
@using MaruMaterialManager.Model.Schema
@using MaruMaterialManager.Services
@using Microsoft.JSInterop
@inject PartService PartService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime


<PageTitle>Parts</PageTitle>

<h1>Parts</h1>

@if (parts is null)
{
  <p>
    <em>Loading...</em>
  </p>
}
else
{
  <div class="mb-3">
    <button class="btn btn-primary"
            @onclick="newPart">
      <i class="bi bi-plus-circle"></i> Create New
    </button>
  </div>

  <div class="table-responsive">
    <table class="table table-striped table-hover">
      <thead class="table-dark">
      <tr>
        <th>Part Number</th>
        <th>Name</th>
        <th>Category</th>
        <th>Unit of Measure</th>
        <th>Unit Price</th>
        <th>Status</th>
        <th>Actions</th>
      </tr>
      </thead>
      <tbody>
      @foreach (var part in parts)
      {
        <tr>
          <td>@part.PartNumber</td>
          <td>@part.Name</td>
          <td>@part.Category?.Name</td>
          <td>@part.UnitOfMeasure</td>
          <td>@part.UnitPrice?.ToString("C")</td>
          <td>
            @if (part.IsActive)
            {
              <span class="badge bg-success">Active</span>
            }
            else
            {
              <span class="badge bg-secondary">Inactive</span>
            }
          </td>
          <td>
            <div class="btn-group" role="group">
              <button class="btn btn-sm btn-outline-primary" @onclick="() => editPart(part.Id)">
                <i class="bi bi-pencil"></i> Edit
              </button>
              <button class="btn btn-sm btn-outline-danger" @onclick="() => deletePart(part.Id)">
                <i class="bi bi-trash"></i> Delete
              </button>
            </div>
          </td>
        </tr>
      }
      </tbody>
    </table>
  </div>
}

@code {
  private List<Part> parts;

  protected override async Task OnInitializedAsync()
  {
    await loadParts();
  }

  private async Task loadParts()
  {
    parts = await PartService.GetPartsAsync();
  }

  private void editPart(int id)
  {
    NavigationManager.NavigateTo($"parts/edit/{id}");
  }

  private void newPart()
  {
    NavigationManager.NavigateTo("parts/new");
  }

  private async Task deletePart(int id)
  {
    var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", 
      "Are you sure you want to delete this part?"
    );
    if (confirmed)
    {
      await PartService.DeletePartAsync(id);
      await loadParts();
      StateHasChanged();
    }
  }

}